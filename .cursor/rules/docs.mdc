---
description:
globs: *.md,*.mdx
alwaysApply: false
---
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## SignalWire documentation project rules

This document outlines the comprehensive standards and conventions for writing documentation in the SignalWire docs codebase.

### Project Overview and Architecture

This is SignalWire's open-source documentation site built with Docusaurus v3. The project uses a monorepo structure with workspaces for the main website, API specifications, and build tools.

#### Key Commands

##### Development
- `yarn install` - Install all dependencies
- `yarn start` - Start local development server (website only)
- `yarn start-fresh` - Clear cache and rebuild prerequisites before starting
- `yarn build` - Build the website and run link checking
- `yarn serve` - Serve the built site locally

##### Specific Build Tasks
- `yarn build:website` - Build just the website
- `yarn build:specs` - Build API specification files
- `yarn build:tools` - Build development tools
- `yarn build:all` - Build both specs and website
- `yarn clean` - Clean build artifacts

##### API Documentation
- `yarn gen-api-docs` - Generate API docs from OpenAPI/TypeSpec specifications
- `yarn clean-api-docs` - Clean existing API documentation
- `yarn clean-and-gen-api-docs` - Clean and regenerate API docs

##### Quality Assurance
- `yarn check-links` - Check for broken internal links in the built site

#### Architecture Overview
```
├── website/                    # Main Docusaurus site
│   ├── docs/                  # Documentation content
│   │   ├── main/              # Primary docs (calling, messaging, platform)
│   │   ├── browser-sdk/       # Browser SDK documentation
│   │   └── realtime-sdk/      # Realtime SDK documentation (versioned)
│   ├── config/                # Configuration modules
│   ├── src/                   # React components and custom code
│   └── docusaurus.config.ts   # Main Docusaurus configuration
├── specs/                     # API specification files (TypeSpec/OpenAPI)
├── tools/                     # Build and development tools
├── CLAUDE.md                  # This file (symbolic link to .cursor/rules/docs.mdc)
└── package.json              # Root workspace configuration
```

#### Development Workflow

##### API Documentation Workflow
API documentation is generated from TypeSpec specifications in the `specs/` directory. Changes to REST APIs require:
1. Update TypeSpec files in `specs/`
2. Run `yarn build:specs` to generate OpenAPI specs
3. Run `yarn gen-api-docs` to update documentation
4. Test changes with `yarn start` or `yarn build`

##### Testing Changes
- **Local development**: Use `yarn start` for most content changes
- **Full site testing**: Use `yarn build && yarn serve` to test the complete site
- **Preview deployments**: Netlify automatically creates preview deployments for PRs

##### Common Development Issues
- **Landing page 404**: Normal with `yarn start` - use `yarn build && yarn serve` to test landing page
- **REST API pages 404**: API docs require build process - run `yarn build:prereqs` first
- **Build prerequisites**: The site requires TypeSpec compilation, plugin building, and API doc generation before starting (automatically handled by `postinstall` and `yarn start-fresh`)

## Documentation structure and organization rules

### Directory structure
- Use kebab-case for all directory and file names
- Each major section must have a `_category_.yaml` file defining metadata. Don't use `_category_.json`.
- Use `index.mdx` for section overview/landing pages
- Prefix component/partial files with underscore (`_`) when they're imported by other files
- Organize content hierarchically: `/home/{product}/{feature}/{topic}`

### Category configuration
```yaml
# _category_.yaml format
label: "Section Name"
position: number  # 0 for overview, 1-3 for main sections
collapsible: false
className: menu-category
```

### File extensions and types
- Use `.mdx` for all content files (enables React components)
- Use `.yaml` for configuration files
- Use `.md` only for pure markdown without component needs

## Content standards

### Frontmatter requirements
Every content file must include:
```yaml
---
title: "Page Title"
sidebar_label: "Menu Label" # if different from title
slug: "/custom-url" # required by our style guide
description: "Brief page description" # for SEO
---
```

### Content structure pattern
1. **Import statements** (components, icons, partials)
2. **Main heading** (H1) with page title
3. **Subtitle component** with compelling description
4. **Introduction paragraph** explaining the content
5. **Action sections** ("Get started", "Try it out", "Choose an API")
6. **Card-based navigation** using CardGroup components
7. **Popular/Featured content** sections

### Writing style guide
- **Tone**: Developer-focused, clear, and actionable
- **Voice**: Use active voice and action-oriented language ("Build", "Create", "Deploy")
- **Length**: Keep descriptions concise (1-2 sentences per card)
- **Technical level**: Assume intermediate technical knowledge
- **Calls-to-action**: Every section should guide users to next steps
- **Titles**: Avoid gerunds in titles when practical ('Install package' rather than 'Installing the package')
- **Sentence case**: Apply sentence case to card titles, tab titles, and pseudo-headers
- **Pseudo-headers**: Titles made with simple bolded text (either on their own line or in lists with colons) should use sentence case
- **Semantic line breaks**: Follow the SemBr specification by putting line breaks 

### Header formatting
- Use sentence case for all headers (capitalize only the first word and proper nouns)
- Examples: "Getting started", "API reference", "Content structure pattern"  
- Avoid title case: ~~"Getting Started"~~, ~~"API Reference"~~, ~~"Content Structure Pattern"~~
- Use only header levels 1-4 (H1, H2, H3, H4)
- Avoid H5 and H6 headers for better document structure

## Component usage standards

### Card components
```jsx
// Standard card usage for navigation
<CardGroup cols={3}>
  <Card 
    title="Feature Name"
    icon={<IconComponent />}
    href="/link/path"
  >
    Brief description of what this leads to
  </Card>
</CardGroup>
```

#### Card content guidelines
- Don't put links in card context/description text
- Don't create bolded "pseudo-headers" within card content
- Keep card descriptions as plain text for better readability

### Icon standards
- Use consistent icon libraries: `react-icons/md`, `react-icons/fa`, `react-icons/lia`
- Choose semantically appropriate icons
- Import only needed icons to avoid bundle bloat
- Use custom icons from `@site/src/icons` when available

### Component organization
```jsx
// Import order:
import Subtitle from "@site/src/components/typography/Subtitle";
import ComponentName from "./_partials/_componentName.mdx";
import { Card, CardGroup } from "@site/src/components/Extras/Card";
import { IconName } from "react-icons/md";
```

#### Component import exemptions
- You don't need to import components that are already available from `@site/src/theme/MDXComponents/index.js`
- These components are automatically available in all MDX files without explicit imports
- Available components include: Language, LangItem, LangSwitch, Tabs, TabItem, Accordion, AccordionGroup, AlphaBadge, BetaBadge, APITable, APITableRow, Card, CardGroup, DocCard, DocCardList, Frame, PreviewCardGroup, PreviewCard, Slideshow, Steps, Subtitle, UseCaseLinks, UseCaseView, Tooltips, GuidesList, GuidesListMirror, ReleaseCard, Tables

## Navigation and user experience

### Information architecture
- **Overview first**: Always start with high-level concepts
- **Progressive disclosure**: Move from general to specific
- **Multiple pathways**: Provide different entry points (beginner, migration, specific use case)
- **Cross-linking**: Reference related sections consistently

### Section types
Each major section should include:
- **"Get started"** - Quick entry points for new users
- **"Choose an API/Tool"** - Decision-making guidance
- **"Popular guides"** - Most commonly needed content
- **"Try it out"** - Hands-on examples or demos

### Link formatting
- Internal links: Link to the page's `/slug`. Avoid relative links (eg., '../../file.mdx')
- External links: Full URLs with proper attribution
- Link text should be descriptive, not "click here"
- Use reference-style links if a link appears more than once in the same document

## Reusability and maintainability

### Partial files
- Create reusable content as `_filename.mdx` in same directory
- Export data arrays for consistent card collections:
```jsx
export const products = [
  {
    name: "Product Name",
    description: "Product description",
    icon: <IconComponent />,
    link: "/product/path",
  }
];
```

### Content data management
- Store card data as JavaScript objects for easy maintenance
- Use consistent property names: `name`, `description`, `icon`, `link`
- Group related items in logical arrays

### SEO and accessibility
- Include `description` in frontmatter for meta tags
- Use semantic heading hierarchy (H1 → H2 → H3)
- Provide alt text for custom images
- Ensure proper focus management for interactive elements

## Quality assurance

### Content review checklist
- [ ] Follows file naming conventions
- [ ] Includes required frontmatter
- [ ] Uses consistent component patterns
- [ ] Links are functional and properly formatted
- [ ] Icons are semantically appropriate
- [ ] Content flows logically from general to specific
- [ ] Includes clear next steps for users
- [ ] Headers use sentence case formatting

---

These rules ensure consistency, maintainability, and excellent user experience across the SignalWire documentation platform. 