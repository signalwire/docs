---
description: 
globs: *.md,*.mdx
alwaysApply: false
---
# SignalWire documentation project rules

This document outlines the comprehensive standards and conventions for writing documentation in the SignalWire docs codebase.

## Documentation structure and organization rules

### Directory structure
- Use kebab-case for all directory and file names
- Each major section must have a `_category_.yaml` file defining metadata
- Use `index.mdx` for section overview/landing pages
- Prefix component/partial files with underscore (`_`) when they're imported by other files
- Organize content hierarchically: `/home/{product}/{feature}/{topic}`

### Category configuration
```yaml
# _category_.yaml format
label: "Section Name"
position: number  # 0 for overview, 1-3 for main sections
collapsible: false
className: menu-category
```

### File extensions and types
- Use `.mdx` for all content files (enables React components)
- Use `.yaml` for configuration files
- Use `.md` only for pure markdown without component needs

## Content standards

### Frontmatter requirements
Every content file must include:
```yaml
---
title: "Page Title"
sidebar_label: "Menu Label" # if different from title
slug: "/custom-url" # optional, auto-generated if omitted
sidebar_position: number # for ordering
description: "Brief page description" # for SEO
---
```

### Content structure pattern
1. **Import statements** (components, icons, partials)
2. **Main heading** (H1) with page title
3. **Subtitle component** with compelling description
4. **Introduction paragraph** explaining the content
5. **Action sections** ("Get started", "Try it out", "Choose an API")
6. **Card-based navigation** using CardGroup components
7. **Popular/Featured content** sections

### Writing style guide
- **Tone**: Developer-focused, clear, and actionable
- **Voice**: Use active voice and action-oriented language ("Build", "Create", "Deploy")
- **Length**: Keep descriptions concise (1-2 sentences per card)
- **Technical level**: Assume intermediate technical knowledge
- **Call-to-action**: Every section should guide users to next steps

### Header formatting
- Use sentence case for all headers (capitalize only the first word and proper nouns)
- Examples: "Getting started", "API reference", "Content structure pattern"  
- Avoid title case: ~~"Getting Started"~~, ~~"API Reference"~~, ~~"Content Structure Pattern"~~

## Component usage standards

### Card components
```jsx
// Standard card usage for navigation
<CardGroup cols={3}>
  <Card 
    title="Feature Name"
    icon={<IconComponent />}
    href="/link/path"
  >
    Brief description of what this leads to
  </Card>
</CardGroup>
```

### Icon standards
- Use consistent icon libraries: `react-icons/md`, `react-icons/fa`, `react-icons/lia`
- Choose semantically appropriate icons
- Import only needed icons to avoid bundle bloat
- Use custom icons from `@site/src/icons` when available

### Component organization
```jsx
// Import order:
import Subtitle from "@site/src/components/typography/Subtitle";
import ComponentName from "./_partials/_componentName.mdx";
import { Card, CardGroup } from "@site/src/components/Extras/Card";
import { IconName } from "react-icons/md";
```

## Navigation and user experience

### Information architecture
- **Overview first**: Always start with high-level concepts
- **Progressive disclosure**: Move from general to specific
- **Multiple pathways**: Provide different entry points (beginner, migration, specific use case)
- **Cross-linking**: Reference related sections consistently

### Section types
Each major section should include:
- **"Get started"** - Quick entry points for new users
- **"Choose an API/Tool"** - Decision-making guidance
- **"Popular guides"** - Most commonly needed content
- **"Try it out"** - Hands-on examples or demos

### Link formatting
- Internal links: `/path/to/page` (relative to site root)
- External links: Full URLs with proper attribution
- Link text should be descriptive, not "click here"

## Reusability and maintainability

### Partial files
- Create reusable content as `_filename.mdx` in same directory
- Export data arrays for consistent card collections:
```jsx
export const products = [
  {
    name: "Product Name",
    description: "Product description",
    icon: <IconComponent />,
    link: "/product/path",
  }
];
```

### Content data management
- Store card data as JavaScript objects for easy maintenance
- Use consistent property names: `name`, `description`, `icon`, `link`
- Group related items in logical arrays

### SEO and accessibility
- Include `description` in frontmatter for meta tags
- Use semantic heading hierarchy (H1 → H2 → H3)
- Provide alt text for custom images
- Ensure proper focus management for interactive elements

## Quality assurance

### Content review checklist
- [ ] Follows file naming conventions
- [ ] Includes required frontmatter
- [ ] Uses consistent component patterns
- [ ] Links are functional and properly formatted
- [ ] Icons are semantically appropriate
- [ ] Content flows logically from general to specific
- [ ] Includes clear next steps for users
- [ ] Headers use sentence case formatting

---

These rules ensure consistency, maintainability, and excellent user experience across the SignalWire documentation platform. 